import random
from traceback import print_tb

import colorama
from colorama import Fore, Style
from pyexpat.errors import messages

colorama.init()


class Fishing:
    def __init__(self):
        self.worm_wrong_enter = 0
        self.fish_count = 0
        self.fish_left = 0
        self.qualit_worm = 0
        self.worm_left = 0
        self.money = 0
        self.fish_rod = "–û–±—ã—á–Ω–∞—è —É–¥–æ—á–∫–∞"
        self.colored_fish_list = []
        self.caught_fish = []  # —Å–ø–∏—Å–æ–∫ –ø–æ–π–º–∞–Ω–æ–π —Ä—ã–±—ã

    def list_activity(self):
        self.activism = {1: ("–ü–µ—Ä–µ–∫—É—Å–∏—Ç—å –±—É–¥–µ—Ä–±—Ä–æ–¥–æ–º", self.dine),
                         2: ("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –¥–∞–ª—å", self.look_distance),
                         3: ("–õ—é–±–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏—Ä–æ–¥–æ–π", self.admire),
                         4: ("–õ–æ–≤–∏—Ç—å —Ä—ã–±—É", self.rand_qual_worms),
                         5: ("–ù–∏—á–µ–≥–æ", self.nothing),
                         6: ("–£–π—Ç–∏ –¥–æ–º–æ–π", self.exit_)
                         }

    def activation(self):
        self.list_activity()
        for key, (desc, _) in self.activism.items():
            print(f"{key}. {desc}")

        self.activ_funk()

    def activ_funk(self):
        try:
            self.choice1 = int(input("–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å(1-6)? "))

            if self.choice1 in self.activism:
                activism = self.activism[self.choice1][1]
                activism()
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ :)")
                self.activ_funk()
        except ValueError:
            print("–û–π, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è (1-6)")
            self.activ_funk()

    def dine(self):
        print(f"{Fore.YELLOW}–¢—ã –ø–æ–¥–∫—Ä–µ–ø–∏–ª—Å—è!{Style.RESET_ALL}")
        self.activ_funk()

    def look_distance(self):
        print(f"{Fore.YELLOW}–í –¥–∞–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å –∫–∞–∫ –ª–µ—Ç–∞—é—Ç –ø—Ç–∏—Ü—ã –∏ —Ç–µ–±–µ\n"
              f"–∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –±—ã –º–æ–≥ —Å—Ç–∞—Ç—å –æ—Ä–Ω–∏—Ç–æ–ª–æ–≥–æ–º!{Style.RESET_ALL}")
        self.activ_funk()

    def admire(self):
        print(f"{Fore.YELLOW}–°–µ–≥–æ–¥–Ω—è –ø–æ—Ç—Ä—è—Å–∞—é—â–∞—è –ø–æ–≥–æ–¥–∫–∞!üåªüåû{Style.RESET_ALL}")
        self.activ_funk()

    def nothing(self):
        print("–•–æ—Ä–æ—à–æ!")
        exit()

    def rand_qual_worms(self):
        worms_rand = random.randint(1, 10)
        self.qualit_worm = worms_rand
        self.worm_left = worms_rand
        print(f"–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è —Å —Å–æ–±–æ–π {Fore.BLUE}{self.qualit_worm}{Style.RESET_ALL} —á–µ—Ä–≤—å(-–µ–π)")
        self.worm_()

    def worm_(self):
        while True:
            while self.worm_left > 0:
                print(self.fish_rod)
                worm = input("–ù–∞–∂–∏–≤–∏—Ç—å —á–µ—Ä–≤—è –Ω–∞ –∫—Ä—é—á–æ–∫? ")
                if worm.lower() == '–¥–∞':
                    self.qualit_worm -= 1
                    self.worm_left = self.qualit_worm
                    throw_into = input("–ó–∞–∫–∏–Ω—É—Ç—å –ø—Ä–∏–º–∞–Ω–∫—É –≤ –ø—Ä—É–¥? ")
                    if throw_into.lower() == '–¥–∞':
                        lucky = random.randint(0, 100)
                        if lucky >= 75:
                            print(lucky)
                            print("–ñ–∞–ª—å, –Ω–∏—á–µ–≥–æ –Ω–µ –∫–ª—é—ë—Ç( ")
                            print(f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {Fore.BLUE}{self.worm_left}{Style.RESET_ALL} —á–µ—Ä–≤—å(-–µ–π)")
                            self.exit_()
                        else:
                            self.catch_fish_def()
                    elif throw_into.lower() == '–Ω–µ—Ç':
                        print("–ó–∞—á–µ–º —á–µ—Ä–≤—è —É–±–∏–ª??")
                        exit()
                    else:
                        print(f"{Fore.RED}(–Ω–∞–¥–æ –±—ã–ª–æ –¥–∞/–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å){Style.RESET_ALL}")
                        self.worm_()

                elif worm.lower() == '–Ω–µ—Ç':
                    print("–°—Ç—Ä–∞–Ω–Ω–æ..")
                    self.activ_funk()

                else:
                    print(f"–ü—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!{Fore.RED}(–Ω–∞–¥–æ –±—ã–ª–æ –¥–∞/–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å){Style.RESET_ALL}")
                    self.worm_()

    def catch_fish_def(self):
        catch_fish = input("–í—ã—É–¥–∏—Ç—å —Ä—ã–±–∫—É? ")
        if catch_fish.lower() == '–¥–∞':
            fish = self.random_fish()
            self.fish_count += 1
            self.fish_left += 1
            self.caught_fish.append(fish)
            self.money += fish['price']
            print(f"–£ —Ç–µ–±—è —É–∂–µ: {Fore.BLUE}{str(self.fish_count)}{Style.RESET_ALL} —Ä—ã–±–∞ –∑–∞ –¥–µ–Ω—å")
            print(f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {Fore.BLUE}{self.worm_left}{Style.RESET_ALL} —á–µ—Ä–≤—å(-–µ–π)")
            self.cooking(fish)

        elif catch_fish.lower() == "–Ω–µ—Ç":
            print("–†—ã–±–∫–∞ —É–π–¥–µ—Ç!")
            self.worm_wrong_enter += 1
            if self.worm_wrong_enter >= 2:
                print("....")
                print("–≠—Ö, —É–ø—É—Å—Ç–∏–ª...")
                self.exit_()
            else:
                self.catch_fish_def()

        else:
            print("\n–¢—ã —É–ø—É—Å—Ç–∏–ª —Ä—ã–±—É! –û–Ω–∞ —É–ø–ª—ã–ª–∞ –Ω–∞–≤—Å–µ–≥–¥–∞...")
            self.exit_()

    def random_fish(self):
        fish_list = [
            {"name": "–ø–ª–æ—Ç–≤–∞", "price": 20},
            {"name": "–µ—Ä—Ö–æ–≤–∫–∞", "price": 30},
            {"name": "–±—ã—á–æ–∫", "price": 40},
            {"name": "–∫–∞—Ä–∞—Å–∏–∫", "price": 50},
            {"name": "–≥—É—Å—Ç–µ—Ä–∞", "price": 60},
            {"name": "–ª–µ—â", "price": 80},
            {"name": "—á–µ—Ö–æ–Ω—å", "price": 90},
            {"name": "–æ–∫—É–Ω—å", "price": 100},
            {"name": "–ª–∏–Ω—å", "price": 110},
            {"name": "—Ç–∏–ª–∞–ø–∏—è", "price": 120},
            {"name": "–∫–∞–º–±–∞–ª–∞", "price": 130},
            {"name": "–≥–æ–ª–∞–≤–ª—å", "price": 140},
            {"name": "—â—É–∫–∞", "price": 150},
            {"name": "—è–∑—å", "price": 160},
            {"name": "–Ω–∞–ª–∏–º", "price": 170},
            {"name": "—Å–∞—Ä–≥–∞–Ω", "price": 180},
            {"name": "—Å—É–¥–∞–∫", "price": 200},
            {"name": "—Ç–æ–ª—Å—Ç–æ–ª–æ–±–∏–∫", "price": 250},
            {"name": "–∫–∞—Ä–ø", "price": 300},
            {"name": "—Ñ–æ—Ä–µ–ª—å", "price": 400},
            {"name": "—Å–æ–º", "price": 500},
            {"name": "—É–≥–æ—Ä—å", "price": 600},
            {"name": "–æ—Å—ë—Ç—Ä", "price": 750},
            {"name": "–º–æ—Ä—Å–∫–æ–π –æ–∫—É–Ω—å", "price": 900},
            {"name": "—Ç—É–Ω–µ—Ü", "price": 1200},
            {"name": "–ª–æ—Å–æ—Å—å", "price": 1500},
            {"name": "–ø–∞–ª—Ç—É—Å", "price": 1800},
            {"name": "–º–µ—á-—Ä—ã–±–∞", "price": 2500},
            {"name": "–±–µ–ª—É–≥–∞", "price": 5000}
        ]
        lucky = random.randint(0, 1000)
        if lucky < 400:
            print(lucky)
            fish_list = fish_list[:12]
        elif lucky < 600:
            print(lucky)
            fish_list = fish_list[13:18]
        elif lucky < 700:
            print(lucky)
            fish_list = fish_list[19:21]
        elif lucky < 900:
            print(lucky)
            fish_list = fish_list[22:23]
        elif lucky < 999:
            print(lucky)
            fish_list = fish_list[24:26]
        else:
            print(lucky)
            fish_list = fish_list[27:28]

        random_fish = random.choice(fish_list)
        print(f"–í—ã –ø–æ–π–º–∞–ª–∏: {self.color_fish(random_fish)}!\n"
              f"–¶–µ–Ω–∞: {random_fish['price']} —Ä—É–±–ª–µ–π")
        return random_fish

    def color_fish(self, fish):
        if isinstance(fish, dict):
            if fish['price'] <= 150:
                color = Fore.GREEN
            elif 150 < fish['price'] <= 300:
                color = Fore.CYAN
            elif 300 < fish['price'] <= 600:
                color = Fore.BLUE
            elif 600 < fish['price'] <= 900:
                color = Fore.YELLOW
            elif 900 < fish['price'] <= 1800:
                color = Fore.MAGENTA
            else:
                color = Fore.RED
            return f"{color}{fish['name']}{Style.RESET_ALL}"
        elif isinstance(fish, str):
            return f"{Fore.CYAN}{fish}{Style.RESET_ALL}"
        else:
            return f"{Fore.WHITE}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä—ã–±–∞{Style.RESET_ALL}"

    def cooking(self, fish):
        cook = input(f"–•–æ—á–µ—à—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å {self.color_fish(fish)} –Ω–∞ –∫–æ—Å—Ç—Ä–µ? (–¥–∞/–Ω–µ—Ç) ")
        if cook.lower() == "–¥–∞":
            self.process_cook(fish)

        elif cook.lower() == "–Ω–µ—Ç":
            print(f"–¢—ã –æ—Å—Ç–∞–≤–∏–ª {self.color_fish(fish)} —Å—ã—Ä–æ–π")
            self.exit_()
        else:
            print(f"–¢—ã —Å–ª–∏—à–∫–æ–º –≥–æ–ª–æ–¥–µ–Ω, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å {Fore.RED}<–¥–∞> –∏–ª–∏ <–Ω–µ—Ç>{Style.RESET_ALL}")
            self.cooking(fish)

    def process_cook(self, fish):
        for i in 'Cooking':
            print(f"{Fore.BLUE}{i}{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}–¢—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª{Style.RESET_ALL} {self.color_fish(fish)}")
        self.money -= fish['price']
        if fish in self.caught_fish:
            self.caught_fish.remove(fish)
        # self.fish_left = len(self.caught_fish)
        self.fish_left -= 1
        print(f"{Fore.BLACK}{self.caught_fish}{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}—É—Ö, –∞ —É—Ö–∞ –ø–æ–ª—É—á–∏–ª–∞—Å—å –æ—Ç–ª–∏—á–Ω–∞—è:)!{Style.RESET_ALL}")
        self.eat()

    def eat(self):
        write_eat = input("–Ω–∞–ø–∏—à–∏ <–∫—É—à–∞—Ç—å> ")
        if write_eat.lower() == "–∫—É—à–∞—Ç—å":
            print("–¢–µ–ø–µ—Ä—å —Ç—ã —Å—ã—Ç!")
            self.exit_()
        else:
            print(f"{Fore.RED}–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ{Style.RESET_ALL}")
            self.eat()

    def exit_(self):
        exit_choice = input("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä—ã–±–∞–ª–∫—É? ")
        if exit_choice.lower() == '–¥–∞':
            if self.fish_left != 0:
                self.colored_fish_list = ', '.join([
                    self.color_fish(fish) for fish in self.caught_fish if isinstance(fish, dict)
                ])
                print(
                    f"–°–µ–≥–æ–¥–Ω—è —Ç—ã –ø–æ–π–º–∞–ª:  {Fore.BLUE}{self.fish_count}{Style.RESET_ALL} —Ä—ã–±(—É)\n"
                    f"–í —Å–µ—Ç–∫–µ: {self.colored_fish_list}\n"
                    f"–° —Å–æ–±–æ–π –¥–æ–º–æ–π –Ω–µ—Å–µ—à—å: {Fore.BLUE}{self.fish_left}{Style.RESET_ALL} —Å—ã—Ä—ã—Ö(-—É—é) —Ä—ã–±(—É)\n"
                    # f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å: {Fore.BLUE}{self.worm_left}{Style.RESET_ALL} —á–µ—Ä–≤—å(-–µ–π)\n"
                )

                self.random_encounter()
            else:
                print("–£ —Ç–µ–±—è –Ω–µ—Ç, —á—Ç–æ –Ω–µ—Å—Ç–∏ –¥–æ–º–æ–π.")
                self.print_home()
                self.call_home()
        elif exit_choice.lower() == "–Ω–µ—Ç":
            if self.worm_left == 0:
                print(f"{Fore.YELLOW}–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–µ–≥–æ–¥–Ω—è —á–µ—Ä–≤–µ–π!{Style.RESET_ALL}")
                self.exit_()
            else:
                self.worm_()
        else:
            print(Fore.RED + "–Ω–∞–ø–∏—à–∏ –¥–∞/–Ω–µ—Ç" + Style.RESET_ALL)
            self.exit_()

    def random_encounter(self):
        encounter = random.randint(1, 2)
        if encounter == 1:
            print(f"–¢–µ–±–µ –ø–æ –ø—É—Ç–∏ –≤—Å—Ç–µ—Ä—Ç–∏–ª—Å—è {Fore.YELLOW}–ö–ª–∏–º{Style.RESET_ALL}!")
            message = input("–•–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å –µ–º—É —Ä—ã–±—É? ")
            if message.lower() == "–¥–∞":
                self.print_money()
            elif message.lower() == "–Ω–µ—Ç":
                print("–õ–∞–¥–Ω–æ, –ö–ª–∏–º —É—à—ë–ª. –ê —Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –¥–æ–º–æ–π —Å —Ä—ã–±–∫–æ–π. –¢–µ–±–µ –Ω—É–∂–Ω–µ–µ!")
                self.print_home()
                self.call_home()
            else:
                print("–û–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑...")
                self.random_encounter()
        else:
            print("–ü–æ –ø—É—Ç–∏ —Ç—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª :(")
            self.sell_fish()

    def sell_fish(self):
        quest_sell = input("–•–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ —Ä—ã–±—É? ")
        if quest_sell.lower() == "–¥–∞":
            while self.caught_fish != 0:
                self.print_money()
        elif quest_sell.lower() == "–Ω–µ—Ç":
            print("–•–æ—Ä–æ—à–æ, —Å–µ–≥–æ–¥–Ω—è –±—ã–ª –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å!")
            self.print_home()
            self.call_home()
        else:
            print("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ï—â—ë —Ä–∞–∑..")
            self.sell_fish()

    def print_money(self):
        print(
            f"–¢—ã –≤—ã—Ä—É—á–∏–ª —Å —Ä—ã–±–∞–ª–∫–∏ {Fore.BLUE}{self.money}{Style.RESET_ALL} —Ä—É–±–ª–µ–π. \n–¢–≤–æ–π –º–µ—à–æ—á–µ–∫ –ø–æ–ª–æ–Ω –¥–µ–Ω–µ–≥üí∞!")
        self.caught_fish = 0
        self.print_home()
        self.call_home()

    def print_home(self):
        for i in 'Home':
            print(f"{Fore.BLUE}{i}{Style.RESET_ALL}  ")

    def call_home(self):
        home = AtHome(self.caught_fish, self.money, self.fish_rod)
        home.mes_you_home()
        home.activation()


class AtHome(Fishing):
    fridge = []

    def __init__(self, caught_fish, money, fish_rod, inventar=0, dog_met=False):
        super().__init__()
        self.caught_fish = caught_fish
        self.money = money
        self.fish_rod = fish_rod
        self.inventar = inventar
        self.dog_met = dog_met
        self.dog_eat = False
        self.action()

    def mes_you_home(self):
        print("–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –¥–æ–º–æ–π!")

    def action(self):
        self.list_at_home = {
            1: ("–ü–æ–ª–æ–∂–∏—Ç—å —Ä—ã–±—É –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", self.fridge_fun),
            2: ("–°–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä", self.tv),
            3: ("–°—Ç–∏—Ä–∞—Ç—å –æ–¥–µ–∂–¥—É", self.washing_clothes),
            4: ("–ò–¥—Ç–∏ —Å–ø–∞—Ç—å", self.good_night),
            5: ("–ó–∞–≤–∞—Ä–∏—Ç—å —á–∞—éüçµ", self.make_tea),
            6: ("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", self.see_fridge),
            7: ("–ü–æ–π—Ç–∏ –Ω–∞ —Ä—ã–±–∞–ª–∫—É", self.go_fishing),
            8: ("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ—à–µ–ª–µ–∫", self.look_wallet),
            9: ("–ü—Ä–æ–¥–∞—Ç—å —Ä—ã–±—É –Ω–∞ –±–∞–∑–∞—Ä–µ", self.sell_fish)
        }
        if self.dog_met:
            self.list_at_home[10] = ("–ü–æ–∫–æ—Ä–º–∏—Ç—å –ø–µ—Å–∏–∫–∞", self.feed_dog)

    def activation(self):
        self.action()
        for key, (desc, _) in self.list_at_home.items():
            print(f"{key}. {desc}")

        self.activ_at_home()

    def activ_at_home(self):
        try:
            self.choice = int(input("\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? (1-9) "))

            if self.choice in self.list_at_home:
                list_at_home = self.list_at_home[self.choice][1]
                list_at_home()
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ :)")
                self.activ_at_home()
        except ValueError:
            print("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä!")
            self.activ_at_home()

    def fridge_fun(self):
        global fridge
        if self.caught_fish != 0:
            print(f"–¢—ã –ø–æ–ª–æ–∂–∏–ª —Ä—ã–±—É: ")
            for fish in self.caught_fish:
                print(f"\t{self.color_fish(fish)}")
            self.fridge.extend(self.caught_fish)
            self.caught_fish = []
            self.activation()
        else:
            print("–£ —Ç–µ–±—è –Ω–µ—Ç—É —Ä—ã–±—ã!")
            self.activation()

    def tv(self):
        print(
            f"{Fore.YELLOW}–¢–µ–ª–µ–≤–∏–∑–æ—Ä –≤–∫–ª—é—á–µ–Ω. –¢–≤–æ—è —Å–ø–∏–Ω–∞ –æ—Ç–¥—ã—Ö–∞–µ—Ç,\n–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, –∫–∞–∫ —Ç–≤–æ–∏ –Ω–æ–≥–∏ —Ç–∏—Ö–æ –≥—É–¥—è—Ç –æ—Ç –Ω–∞—Å—ã—â–µ–Ω–æ–≥–æ –¥–Ω—è...üëå‚ú®{Style.RESET_ALL}")
        self.random_visit()

    def washing_clothes(self):
        print(f"{Fore.YELLOW}–¢—ã —Å—Ç–∏—Ä–∞–µ—à—å –æ–¥–µ–∂–¥—É. –ß–∏—Å–ª–æ—Ç–∞ - –∑–∞–ª–æ–≥ –∑–¥–æ—Ä–æ–≤—å—è!ü´ß{Style.RESET_ALL}")
        self.activation()

    def good_night(self):
        print(
            f"{Fore.YELLOW}–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! –ü—É—Å—Ç—å —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏—Ç—Å—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è —Ä—ã–±–∫–∞üåû.\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.{Style.RESET_ALL}")
        exit()

    def check_tea(self):
        if self.inventar == 0:
            self.tea()
        else:
            self.make_tea()

    def see_fridge(self):
        print("–£ —Ç–µ–±—è –µ—Å—Ç—å: ")

        def show_fish():
            for fish in self.fridge:
                print(f"\t{self.color_fish(fish)}")
            self.activation()

        show_fish()

    def feed_dog(self):
        if not self.dog_eat:
            for i in "Feed":
                print(f"{Fore.MAGENTA}{i}{Style.RESET_ALL}")
            print(f"{Fore.GREEN}–ü–µ—Å–∏–∫ —Ç–µ–ø–µ—Ä—å —Å—ã—Ç! –ú–æ–ª–æ–¥–µ—Ü :){Style.RESET_ALL}")
            self.dog_eat = True
            self.activation()
        else:
            print(f"{Fore.CYAN}–¢—ã —É–∂–µ –∫–æ—Ä–º–∏–ª –µ–≥–æ —Ä–∞–Ω–µ–µ){Style.RESET_ALL}")
            self.activation()

    def go_fishing(self):
        fishing = Fishing()
        fishing.money = self.money  # –ü–µ—Ä–µ–¥–∞—ë–º –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ä—ã–±–∞–ª–∫—É
        fishing.fish_rod = self.fish_rod  # –ü–µ—Ä–µ–¥–∞—ë–º —É–¥–æ—á–∫—É –Ω–∞ —Ä—ã–±–∞–ª–∫—É
        start()

    def look_wallet(self):
        if self.money > 0:
            print(f"–£ —Ç–µ–±—è –µ—Å—Ç—å {Fore.GREEN}{self.money}{Style.RESET_ALL} —Ä—É–±–ª–µ–π")
            self.activation()
        else:
            print(f"–£—Ö—Ç—ã —É —Ç–µ–±—è —Ü–µ–ª—ã—Ö {self.money} —Ä—É–±–ª–µ–π. –û–¥–Ω–∏ –º—É—Ö–∏!ü™∞ü§Ø")
            self.activation()

    def random_visit(self):
        visit = random.randint(0, 1)
        if visit == 0:
            self.activation()
        else:
            print(f"–í –≥–æ—Å—Ç–∏ –Ω–∞–≤–µ–¥–∞–ª—Å—è {Fore.YELLOW}–ö–ª–∏–º{Style.RESET_ALL}!")
            self.nardu_klim()

    def tea(self):
        mes = input("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç—Ä–∞–≤—ã. –ü–æ–π–¥–µ—à—å –≤ –≥–æ—Ä—ã? ")
        if mes.lower() == '–¥–∞':
            for i in 'going...':
                print(f"{Fore.BLUE}{i}{Style.RESET_ALL}")
            mountains = Mountains(self.fish_rod, self.money, self.dog_met)
            mountains.message()

        elif mes.lower() == '–Ω–µ—Ç':
            print("–•–æ—Ä–æ—à–æ, –Ω–µ –ø–æ–π–¥–µ–º")
            self.activation()
        else:
            print(f"{Fore.RED}–¥–∞/–Ω–µ—Ç{Style.RESET_ALL}")
            self.tea()

    def make_tea(self):
        if self.inventar > 0:
            recept = ("–†–µ—Ü–µ–ø—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –æ—Å–æ–±–æ–≥–æ —á–∞—è:\n"
                      "3. –ü–æ–∂–æ–∂–¥–∞—Ç—å –ø–æ–∫–∞ –∑–∞–∫–∏–ø–∏—Ç —á–∞–π–Ω–∏–∫\n"
                      "2. –ü–æ—Å—Ç–∞–≤–∏—Ç—å —á–∞–π–Ω–∏–∫ –Ω–∞ –æ–≥–æ–Ω—å –≤ –ø–µ—á–∏\n"
                      "1. –î–æ—Å—Ç–∞—Ç—å –∞—Ä–æ–º–∞—Ç–Ω—ã–µ —Ç—Ä–∞–≤—ã\n"
                      "4. –í—Å—ã–ø–∞—Ç—å –≥–æ—Ä—Å—Ç–æ–∫ —Ç—Ä–∞–≤")
            print(recept)
        else:
            self.tea()

        def numbers():
            enter_numbers = input("–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü—ã—Ñ—Ä: ")
            if enter_numbers == '1234':
                for tea in 'teaparty':
                    print(f"{Fore.BLUE}{tea}{Style.RESET_ALL}")
                self.inventar -= 1
                print("–ê—Ä–æ–º–∞—Ç —á–∞–π —Å–≤–æ–¥–∏—Ç —Ç–µ–±—è —Å —É–º–∞! –í–æ—Ç —á—Ç–æ –∑–Ω–∞—á–∏—Ç —á–∞–π —Å –≥–æ—Ä–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π..")
                print(f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å: {Fore.BLUE}{self.inventar}{Style.RESET_ALL} ")
                self.activation()
            else:
                print("–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!")
                numbers()

        numbers()

    def nardu_klim(self):
        nardu = input("–•–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å —Å –Ω–∏–º –≤ –Ω–∞—Ä–¥—ã? ")
        if nardu.lower() == '–¥–∞':
            print("–í—ã –∏–≥—Ä–∞–µ—Ç–µ! –ö–ª–∏–º —è–≤–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–µ—Ä—å–µ–∑–Ω–æ...")  # –º–± –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–≥—Ä—ã –≤ –Ω–∞—Ä–¥—ã
            exit()
        elif nardu.lower() == '–Ω–µ—Ç':
            print("–ö–ª–∏–º –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥—Ä—É—Å—Ç–∏–ª. –ù–æ –Ω–∞—á–∞–ª —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ –µ–≥–æ –≥–µ—Ä–æ–∏—á–µ—Å–∫–æ–º —Å–ø–∞—Å–µ–Ω–∏–∏ –∫–æ—Ä–∞–±–ª—è –≤ —à—Ç–æ—Ä–º!üö¢")
            exit()
        else:
            print(f"{Fore.RED}–¥–∞/–Ω–µ—Ç{Style.RESET_ALL}")
            self.nardu_klim()

    def new_friend(self):
        if not self.dog_met:
            self.dog_met = True
            print(
                f"{Fore.GREEN}–£ —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –¥—Ä—É–≥!\n<–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª—å—à–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–æ–º–µ>{Style.RESET_ALL}")
        self.action()
        self.activation()


class Mountains(AtHome):
    dog_met = False

    def __init__(self, money, fish_rod, dog_met):
        self.money = money
        self.fish_rod = fish_rod
        self.dog_met = dog_met

        super().__init__(caught_fish=0, money=self.money, fish_rod=self.fish_rod, inventar=0, dog_met=self.dog_met)
        self.max_length = 10
        self.qual_tea = 0

    def message(self):
        print(f"{Fore.GREEN}–í—ã –¥–æ–±—Ä–∞–ª–∏—Å—å –¥–æ –±–æ–≥–∞—Ç–æ–π –ø–æ–ª—è–Ω—ã{Style.RESET_ALL}")
        self.for_dog()
        self.random_tea()

    def for_dog(self):
        global dog_met
        if self.dog_met == False and random.randint(0, 1) == 1:
            self.dog_met = True
            print(f"{Fore.YELLOW}–í–∞–º –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è –æ–¥–∏–Ω–æ–∫–∏–π –ø–µ—Å–∏–∫!{Style.RESET_ALL}")
            name = input("–ö–∞–∫ –Ω–∞–∑–æ–≤–µ—à—å? ")
            print(f"–£—Ö—Ç—ã! –¢–µ–ø–µ—Ä—å {Fore.YELLOW}{name}{Style.RESET_ALL} –±—É–¥–µ—Ç —Ç–≤–æ–∏–º –≤–µ—Ä–Ω—ã–º –¥—Ä—É–≥–æ–º")
            return self.dog_met == True

    def trade(self):
        random_trader = random.randint(0, 1)
        if random_trader == 0:
            self.return_home()
        else:
            print(f"{Fore.YELLOW}–¢–µ–±–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è —Ç–æ—Ä–≥–æ–≤–µ—Ü —É–¥–æ—á–∫–∞–º–∏!{Style.RESET_ALL}")

            def want():
                yes_no = input("–•–æ—á–µ—à—å –∫—É–ø–∏—Ç—å —É –Ω–µ–≥–æ —á—Ç–æ-—Ç–æ?(–¥–∞/–Ω–µ—Ç) ")
                if yes_no.lower() == '–¥–∞':
                    fish_rod_list = {
                        1: ("–ë–∞–º–±—É–∫–æ–≤–∞—è —É–¥–æ—á–∫–∞", 1000),
                        2: ("–°–ø–∏–Ω–Ω–∏–Ω–≥ —É–¥–æ—á–∫–∞", 2500),
                        3: ("–ö–∞—Ä–ø–æ–≤–∞—è —É–¥–æ—á–∫–∞", 4000)
                    }
                    for key, (name, price) in fish_rod_list.items():
                        print(f"{key}. {name} - {price} —Ä—É–±.")

                    def which_f():
                        try:
                            buy = input("–ö–∞–∫—É—é –∫—É–ø–∏—à—å? (–≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä): ")
                            if buy.isdigit() and int(buy) in fish_rod_list:
                                buy = int(buy)
                                name, price = fish_rod_list[buy]
                                if int(self.money) < price:
                                    print(f"–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {price - self.money} —Ä—É–±–ª–µ–π!")
                                    self.return_home()
                                else:
                                    self.money -= price
                                    self.fish_rod = name  # –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —É–¥–æ—á–∫—É
                                    print(f"–¢—ã –∫—É–ø–∏–ª {name}! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {self.money} —Ä—É–±.")
                                    self.return_home()
                            else:
                                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")
                                which_f()
                        except ValueError:
                            print("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ")
                    which_f()                                  #–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!

                elif yes_no.lower() == "–Ω–µ—Ç":
                    self.return_home()
                else:
                    print("–û–ô, –≤–≤–µ–¥–∏ –¥–∞/–Ω–µ—Ç!")
                    want()

            want()

    def collect_tea(self):
        self.random_tea()
        self.max_length = 10

    def random_tea(self):
        self.qual_tea = random.randint(1, 20)
        print(f"–ù–∞ –ø–æ–ª—è–Ω–µ —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–∞–≤ –Ω–∞ {self.qual_tea} –ø—É—á–∫–æ–≤(-–æ–∫)")
        self.skolko_tea()

    def skolko_tea(self):
        while self.inventar < self.max_length and self.qual_tea > 0:
            try:
                user_collect = int(
                    input(f"–°–∫–æ–ª—å–∫–æ —Å–æ–±–µ—Ä–µ—à—å? (–î–æ—Å—Ç—É–ø–Ω–æ: {self.qual_tea}, –ú–µ—Å—Ç–æ: {self.max_length - self.inventar}) "))
                if user_collect + self.inventar > self.max_length:
                    print(
                        f"{Fore.RED}–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –≤ —Ä—é–∫–∑–∞–∫–µ!{Style.RESET_ALL} –ú–æ–∂–µ—à—å –≤–∑—è—Ç—å —Ç–æ–ª—å–∫–æ {self.max_length - self.inventar} –ø—É—á–∫–æ–≤.")
                elif user_collect > self.qual_tea:
                    print(f"{Fore.RED}–ù–∞ –ø–æ–ª—è–Ω–µ —Å—Ç–æ–ª—å–∫–æ –Ω–µ—Ç!{Style.RESET_ALL} –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {self.qual_tea} –ø—É—á–∫–æ–≤.")
                elif user_collect == 0:
                    self.trade()
                else:
                    self.inventar += user_collect
                    self.qual_tea -= user_collect
                    print(
                        f"–¢—ã —Å–æ–±—Ä–∞–ª {Fore.GREEN}{user_collect}{Style.RESET_ALL} –ø—É—á–∫–æ–≤. –í —Ä—é–∫–∑–∞–∫–µ: {Fore.BLUE}{self.inventar}{Style.RESET_ALL}.")
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

        if self.inventar == self.max_length:
            print("–†—é–∫–∑–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω!")
        elif self.qual_tea == 0:
            print("–ù–∞ –ø–æ–ª—è–Ω–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ç—Ä–∞–≤!")

        self.trade()

    def return_home(self):
        print(self.dog_met)
        for i in "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ–º–æ–π...":
            print(f"{Fore.CYAN}{i}{Style.RESET_ALL}", end='', flush=True)
        print()
        home = AtHome(inventar=self.inventar, caught_fish=0, fish_rod=self.fish_rod, dog_met=self.dog_met,
                      money=self.money)
        home.mes_you_home()
        home.activation()


def start():
    if __name__ == '__main__':
        fishing = Fishing()
        fishing.list_activity()
        fishing.activation()


start()

# home = AtHome(inventar=0, caught_fish=[], money=3000, fish_rod="–û–±—ã—á–Ω–∞—è —É–¥–æ—á–∫–∞")
# home.activation()
# moun = Mountains(money=3000, fish_rod="–û–±—ã—á–Ω–∞—è —É–¥–æ—á–∫–∞")
# moun.message()
