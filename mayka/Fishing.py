import random
import colorama
from colorama import Fore, Style

colorama.init()


class Fishing:
    def __init__(self):
        self.worm_wrong_enter = 0
        self.fish_count = 0
        self.fish_left = 0
        self.qualit_worm = 0
        self.worm_left = 0
        self.money = 0
        self.colored_fish_list = []
        self.caught_fish = []  # —Å–ø–∏—Å–æ–∫ –ø–æ–π–º–∞–Ω–æ–π —Ä—ã–±—ã

    def list_activity(self):
        activism = ['1-–ü–µ—Ä–µ–∫—É—Å–∏—Ç—å –±—É–¥–µ—Ä–±—Ä–æ–¥–æ–º', '2-–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –¥–∞–ª—å', '3-–õ—é–±–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏—Ä–æ–¥–æ–π', '4-–õ–æ–≤–∏—Ç—å —Ä—ã–±—É',
                    '5-–ù–∏—á–µ–≥–æ', '6-–£–π—Ç–∏ –¥–æ–º–æ–π']
        for activity in activism:
            print(activity)
        activism[0] = 1
        activism[1] = 2
        activism[2] = 3
        activism[3] = 4
        activism[4] = 5
        activism[5] = 6
        self.activ_funk()

    def activ_funk(self):
        try:
            any_act = int(input("\n–ß—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?(1-5) "))
            if any_act == 1:
                print(f"{Fore.YELLOW}–¢—ã –ø–æ–¥–∫—Ä–µ–ø–∏–ª—Å—è!{Style.RESET_ALL}")
                self.activ_funk()
            elif any_act == 2:
                print(f"{Fore.YELLOW}–í –¥–∞–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å –∫–∞–∫ –ª–µ—Ç–∞—é—Ç –ø—Ç–∏—Ü—ã –∏ —Ç–µ–±–µ\n"
                      f"–∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –±—ã –º–æ–≥ —Å—Ç–∞—Ç—å –æ—Ä–Ω–∏—Ç–æ–ª–æ–≥–æ–º!{Style.RESET_ALL}")
                self.activ_funk()
            elif any_act == 3:
                print(f"{Fore.YELLOW}–°–µ–≥–æ–¥–Ω—è –ø–æ—Ç—Ä—è—Å–∞—é—â–∞—è –ø–æ–≥–æ–¥–∫–∞!üåªüåû{Style.RESET_ALL}")
                self.activ_funk()
            elif any_act == 4:
                self.rand_qual_worms()
                self.worm_()
            elif any_act == 5:
                print("–•–æ—Ä–æ—à–æ!")
                exit()
            elif any_act == 6:
                self.exit_()
            else:
                print("–û–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑...")
                self.activ_funk()
        except ValueError:
            print("–û–π, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è (1-5)")
            self.activ_funk()

    def rand_qual_worms(self):
        worms_rand = random.randint(1, 10)
        self.qualit_worm = worms_rand
        self.worm_left = worms_rand
        print(f"–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è —Å —Å–æ–±–æ–π {Fore.BLUE}{self.qualit_worm}{Style.RESET_ALL} —á–µ—Ä–≤—å(-–µ–π)")

    def worm_(self):
        while True:
            while self.worm_left > 0:
                worm = input("–ù–∞–∂–∏–≤–∏—Ç—å —á–µ—Ä–≤—è –Ω–∞ –∫—Ä—é—á–æ–∫? ")
                if worm.lower() == '–¥–∞':
                    self.qualit_worm -= 1
                    self.worm_left = self.qualit_worm
                    throw_into = input("–ó–∞–∫–∏–Ω—É—Ç—å –ø—Ä–∏–º–∞–Ω–∫—É –≤ –ø—Ä—É–¥? ")
                    if throw_into.lower() == '–¥–∞':
                        lucky = random.randint(0, 1)
                        if lucky == 1:
                            print("–ñ–∞–ª—å, –Ω–∏—á–µ–≥–æ –Ω–µ –∫–ª—é—ë—Ç( ")
                            print(f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {Fore.BLUE}{self.worm_left}{Style.RESET_ALL} —á–µ—Ä–≤—å(-–µ–π)")
                            self.exit_()
                        else:
                            self.catch_fish_def()
                    elif throw_into.lower() == '–Ω–µ—Ç':
                        print("–ó–∞—á–µ–º —á–µ—Ä–≤—è —É–±–∏–ª??")
                        exit()
                    else:
                        print(f"{Fore.RED}(–Ω–∞–¥–æ –±—ã–ª–æ –¥–∞/–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å){Style.RESET_ALL}")
                        self.worm_()

                elif worm.lower() == '–Ω–µ—Ç':
                    print("–°—Ç—Ä–∞–Ω–Ω–æ..")
                    self.activ_funk()

                else:
                    print(f"–ü—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!{Fore.RED}(–Ω–∞–¥–æ –±—ã–ª–æ –¥–∞/–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å){Style.RESET_ALL}")
                    self.worm_()

    def catch_fish_def(self):
        catch_fish = input("–í—ã—É–¥–∏—Ç—å —Ä—ã–±–∫—É? ")
        if catch_fish.lower() == '–¥–∞':
            fish = self.random_fish()
            self.fish_count += 1
            self.fish_left += 1
            self.caught_fish.append(fish)
            self.money += fish['price']
            print(f"–£ —Ç–µ–±—è —É–∂–µ: {Fore.BLUE}{str(self.fish_count)}{Style.RESET_ALL} —Ä—ã–±–∞ –∑–∞ –¥–µ–Ω—å")
            print(f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {Fore.BLUE}{self.worm_left}{Style.RESET_ALL} —á–µ—Ä–≤—å(-–µ–π)")
            self.cooking(fish)

        elif catch_fish.lower() == "–Ω–µ—Ç":
            print("–†—ã–±–∫–∞ —É–π–¥–µ—Ç!")
            self.worm_wrong_enter += 1
            if self.worm_wrong_enter >= 2:
                print("....")
                print("–≠—Ö, —É–ø—É—Å—Ç–∏–ª...")
                self.exit_()
            else:
                self.catch_fish_def()

        else:
            print("\n–¢—ã —É–ø—É—Å—Ç–∏–ª —Ä—ã–±—É! –û–Ω–∞ —É–ø–ª—ã–ª–∞ –Ω–∞–≤—Å–µ–≥–¥–∞...")
            self.exit_()

    def random_fish(self):
        fish_list = [
            {"name": "–∫–∞—Ä–∞—Å–∏–∫", "price": 50},
            {"name": "—â—É–∫–∞", "price": 150},
            {"name": "–æ–∫—É–Ω—å", "price": 100},
            {"name": "–ø–ª–æ—Ç–≤–∞", "price": 20},
            {"name": "—Å—É–¥–∞–∫", "price": 200},
            {"name": "–ª–µ—â", "price": 80},
            {"name": "–∫–∞—Ä–ø", "price": 300},
            {"name": "—Å–æ–º", "price": 500},
            {"name": "—Ç–∏–ª–∞–ø–∏—è", "price": 120},
            {"name": "—Ñ–æ—Ä–µ–ª—å", "price": 400}
        ]
        random_fish = random.choice(fish_list)
        print(f"–í—ã –ø–æ–π–º–∞–ª–∏: {self.color_fish(random_fish)}!\n"
              f"–¶–µ–Ω–∞: {random_fish['price']} —Ä—É–±–ª–µ–π")
        return random_fish

    def color_fish(self, fish):
        if isinstance(fish, dict):
            if fish['price'] <= 100:
                color = Fore.GREEN
            elif 100 < fish['price'] <= 300:
                color = Fore.YELLOW
            elif 300 < fish['price'] <= 400:
                color = Fore.MAGENTA
            else:
                color = Fore.RED
            return f"{color}{fish['name']}{Style.RESET_ALL}"
        elif isinstance(fish, str):
            return f"{Fore.CYAN}{fish}{Style.RESET_ALL}"
        else:
            return f"{Fore.WHITE}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä—ã–±–∞{Style.RESET_ALL}"

    def cooking(self, fish):
        cook = input(f"–•–æ—á–µ—à—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å {self.color_fish(fish)} –Ω–∞ –∫–æ—Å—Ç—Ä–µ? (–¥–∞/–Ω–µ—Ç) ")
        if cook.lower() == "–¥–∞":
            self.process_cook(fish)

        elif cook.lower() == "–Ω–µ—Ç":
            print(f"–¢—ã –æ—Å—Ç–∞–≤–∏–ª {self.color_fish(fish)} —Å—ã—Ä–æ–π")
            self.exit_()
        else:
            print(f"–¢—ã —Å–ª–∏—à–∫–æ–º –≥–æ–ª–æ–¥–µ–Ω, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å {Fore.RED}<–¥–∞> –∏–ª–∏ <–Ω–µ—Ç>{Style.RESET_ALL}")
            self.cooking(fish)

    def process_cook(self, fish):
        for i in 'Cooking':
            print(f"{Fore.BLUE}{i}{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}–¢—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª{Style.RESET_ALL} {self.color_fish(fish)}")
        self.money -= fish['price']
        if fish in self.caught_fish:
            self.caught_fish.remove(fish)
        # self.fish_left = len(self.caught_fish)
        self.fish_left -= 1
        print(f"{Fore.BLACK}{self.caught_fish}{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}—É—Ö, –∞ —É—Ö–∞ –ø–æ–ª—É—á–∏–ª–∞—Å—å –æ—Ç–ª–∏—á–Ω–∞—è:)!{Style.RESET_ALL}")
        self.eat()

    def eat(self):
        write_eat = input("–Ω–∞–ø–∏—à–∏ <–∫—É—à–∞—Ç—å> ")
        if write_eat.lower() == "–∫—É—à–∞—Ç—å":
            print("–¢–µ–ø–µ—Ä—å —Ç—ã —Å—ã—Ç!")
            self.exit_()
        else:
            print(f"{Fore.RED}–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ{Style.RESET_ALL}")
            self.eat()

    def exit_(self):
        exit_choice = input("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä—ã–±–∞–ª–∫—É? ")
        if exit_choice.lower() == '–¥–∞':
            if self.fish_left != 0:
                self.colored_fish_list = ', '.join([
                    self.color_fish(fish) for fish in self.caught_fish if isinstance(fish, dict)
                ])
                print(
                    f"–°–µ–≥–æ–¥–Ω—è —Ç—ã –ø–æ–π–º–∞–ª:  {Fore.BLUE}{self.fish_count}{Style.RESET_ALL} —Ä—ã–±(—É)\n"
                    f"–í —Å–µ—Ç–∫–µ: {self.colored_fish_list}\n"
                    f"–° —Å–æ–±–æ–π –¥–æ–º–æ–π –Ω–µ—Å–µ—à—å: {Fore.BLUE}{self.fish_left}{Style.RESET_ALL} —Å—ã—Ä—ã—Ö(-—É—é) —Ä—ã–±(—É)\n"
                    # f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å: {Fore.BLUE}{self.worm_left}{Style.RESET_ALL} —á–µ—Ä–≤—å(-–µ–π)\n"
                )

                self.random_encounter()
            else:
                print("–£ —Ç–µ–±—è –Ω–µ—Ç, —á—Ç–æ –Ω–µ—Å—Ç–∏ –¥–æ–º–æ–π.")
                self.print_home()
                self.call_home()
        elif exit_choice.lower() == "–Ω–µ—Ç":
            if self.worm_left == 0:
                print(f"{Fore.YELLOW}–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–µ–≥–æ–¥–Ω—è —á–µ—Ä–≤–µ–π!{Style.RESET_ALL}")
                self.exit_()
            else:
                self.worm_()
        else:
            print(Fore.RED + "–Ω–∞–ø–∏—à–∏ –¥–∞/–Ω–µ—Ç" + Style.RESET_ALL)
            self.exit_()

    def random_encounter(self):
        encounter = random.randint(1, 2)
        if encounter == 1:
            print(f"–¢–µ–±–µ –ø–æ –ø—É—Ç–∏ –≤—Å—Ç–µ—Ä—Ç–∏–ª—Å—è {Fore.YELLOW}–ö–ª–∏–º{Style.RESET_ALL}!")
            message = input("–•–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å –µ–º—É —Ä—ã–±—É? ")
            if message.lower() == "–¥–∞":
                self.print_money()
            elif message.lower() == "–Ω–µ—Ç":
                print("–õ–∞–¥–Ω–æ, –ö–ª–∏–º —É—à—ë–ª. –ê —Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –¥–æ–º–æ–π —Å —Ä—ã–±–∫–æ–π. –¢–µ–±–µ –Ω—É–∂–Ω–µ–µ!")
                self.print_home()
                self.call_home()
            else:
                print("–û–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑...")
                self.random_encounter()
        else:
            print("–ü–æ –ø—É—Ç–∏ —Ç—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª :(")
            self.sell_fish()

    def sell_fish(self):
        quest_sell = input("–•–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ —Ä—ã–±—É? ")
        if quest_sell.lower() == "–¥–∞":
            self.print_money()
        elif quest_sell.lower() == "–Ω–µ—Ç":
            print("–•–æ—Ä–æ—à–æ, —Å–µ–≥–æ–¥–Ω—è –±—ã–ª –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å!")
            self.print_home()
            self.call_home()
        else:
            print("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ï—â—ë —Ä–∞–∑..")
            self.sell_fish()

    def print_money(self):
        print(
            f"–¢—ã –≤—ã—Ä—É—á–∏–ª —Å —Ä—ã–±–∞–ª–∫–∏ {Fore.BLUE}{self.money}{Style.RESET_ALL} —Ä—É–±–ª–µ–π. \n–¢–≤–æ–π –º–µ—à–æ—á–µ–∫ –ø–æ–ª–æ–Ω –¥–µ–Ω–µ–≥üí∞!")
        self.caught_fish = 0
        self.print_home()
        self.call_home()

    def print_home(self):
        for i in 'Home':
            print(f"{Fore.BLUE}{i}{Style.RESET_ALL}  ")

    def call_home(self):
        home = AtHome(self.caught_fish)
        home.mes_you_home()
        home.activ_at_home()


class AtHome(Fishing):
    fridge = []

    def __init__(self, caught_fish, inventar=0):
        super().__init__()
        self.caught_fish = caught_fish
        self.inventar = inventar

    def mes_you_home(self):
        print("–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –¥–æ–º–æ–π!")

    def activ_at_home(
            self):  # —Å–¥–µ–ª–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ —Å–ª–æ–≤–∞—Ä—å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π  [{'1': '–ü–æ–ª–æ–∂–∏—Ç—å —Ä—ã–±—É –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫'}]
        list_at_home = ['1. –ü–æ–ª–æ–∂–∏—Ç—å —Ä—ã–±—É –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫', '2. –°–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä',
                        '3. –°—Ç–∏—Ä–∞—Ç—å –æ–¥–µ–∂–¥—É', '4. –ò–¥—Ç–∏ —Å–ø–∞—Ç—å', '5. –ó–∞–≤–∞—Ä–∏—Ç—å —á–∞—éüçµ',
                        '6. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫', '7. –ü–æ–π—Ç–∏ –Ω–∞ —Ä—ã–±–∞–ª–∫—É'
                        ]
        for activ in list_at_home:
            print(activ)
        list_at_home[0] = 1
        list_at_home[1] = 2
        list_at_home[2] = 3
        list_at_home[3] = 4
        list_at_home[4] = 5
        list_at_home[5] = 6
        list_at_home[6] = 7
        self.activ_funk_home()

    def activ_funk_home(self):
        global fridge
        choice = int(input("\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? (1-5) "))
        if choice == 1:
            if len(self.caught_fish) != 0:
                print(f"–¢—ã –ø–æ–ª–æ–∂–∏–ª —Ä—ã–±—É: ")
                for fish in self.caught_fish:
                    print(f"\t{self.color_fish(fish)}")
                self.fridge.extend(self.caught_fish)
                self.caught_fish = []
                self.activ_funk_home()
            else:
                print("–£ —Ç–µ–±—è –Ω–µ—Ç—É —Ä—ã–±—ã!")
                self.activ_funk_home()
        elif choice == 2:
            print(
                "–¢–µ–ª–µ–≤–∏–∑–æ—Ä –≤–∫–ª—é—á–µ–Ω. –¢–≤–æ—è —Å–ø–∏–Ω–∞ –æ—Ç–¥—ã—Ö–∞–µ—Ç, –∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, –∫–∞–∫ —Ç–≤–æ–∏ –Ω–æ–≥–∏ —Ç–∏—Ö–æ –≥—É–¥—è—Ç –æ—Ç –Ω–∞—Å—ã—â–µ–Ω–æ–≥–æ –¥–Ω—è...")
            self.random_visit()
        elif choice == 3:
            print("–¢—ã —Å—Ç–∏—Ä–∞–µ—à—å –æ–¥–µ–∂–¥—É. –ß–∏—Å–ª–æ—Ç–∞ - –∑–∞–ª–æ–≥ –∑–¥–æ—Ä–æ–≤—å—è!")
            self.activ_funk_home()
        elif choice == 4:
            print("–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! –ü—É—Å—Ç—å —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏—Ç—Å—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è —Ä—ã–±–∫–∞üåû.\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            exit()
        elif choice == 5:
            if self.inventar == 0:
                self.tea()
            else:
                self.make_tea()
        elif choice == 6:
            print("–£ —Ç–µ–±—è –µ—Å—Ç—å: ")

            def show_fish():
                for fish in self.fridge:
                    print(f"\t{self.color_fish(fish)}")
                self.activ_funk_home()

            show_fish()
        elif choice == 7:
            start()
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ!")
            self.activ_funk_home()

    def random_visit(self):
        visit = random.randint(0, 1)
        if visit == 0:
            self.activ_funk_home()
        else:
            print(f"–í –≥–æ—Å—Ç–∏ –Ω–∞–≤–µ–¥–∞–ª—Å—è {Fore.YELLOW}–ö–ª–∏–º{Style.RESET_ALL}!")
            self.nardu_klim()

    def tea(self):
        mes = input("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç—Ä–∞–≤—ã. –ü–æ–π–¥–µ—à—å –≤ –≥–æ—Ä—ã? ")
        if mes.lower() == '–¥–∞':
            for i in 'going...':
                print(f"{Fore.BLUE}{i}{Style.RESET_ALL}")
            mountains = Mountains()
            mountains.message()
            mountains.collect_tea()

        elif mes.lower() == '–Ω–µ—Ç':
            print("–•–æ—Ä–æ—à–æ, –Ω–µ –ø–æ–π–¥–µ–º")
            self.activ_funk_home()
        else:
            print(f"{Fore.RED}–¥–∞/–Ω–µ—Ç{Style.RESET_ALL}")
            self.tea()

    def make_tea(self):
        if self.inventar > 0:
            recept = ("–†–µ—Ü–µ–ø—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –æ—Å–æ–±–æ–≥–æ —á–∞—è:\n"
                      "3. –ü–æ–∂–æ–∂–¥–∞—Ç—å –ø–æ–∫–∞ –∑–∞–∫–∏–ø–∏—Ç —á–∞–π–Ω–∏–∫\n"
                      "2. –ü–æ—Å—Ç–∞–≤–∏—Ç—å —á–∞–π–Ω–∏–∫ –Ω–∞ –æ–≥–æ–Ω—å –≤ –ø–µ—á–∏\n"
                      "1. –î–æ—Å—Ç–∞—Ç—å –∞—Ä–æ–º–∞—Ç–Ω—ã–µ —Ç—Ä–∞–≤—ã\n"
                      "4. –í—Å—ã–ø–∞—Ç—å –≥–æ—Ä—Å—Ç–æ–∫ —Ç—Ä–∞–≤")
            print(recept)

        def numbers():
            enter_numbers = input("–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü—ã—Ñ—Ä: ")
            if enter_numbers == '1234':
                for tea in 'teaparty':
                    print(f"{Fore.BLUE}{tea}{Style.RESET_ALL}")
                self.inventar -= 1
                print("–ê—Ä–æ–º–∞—Ç —á–∞–π —Å–≤–æ–¥–∏—Ç —Ç–µ–±—è —Å —É–º–∞! –í–æ—Ç —á—Ç–æ –∑–Ω–∞—á–∏—Ç —á–∞–π —Å –≥–æ—Ä–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π..")
                print(f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å: {Fore.BLUE}{self.inventar}{Style.RESET_ALL} ")
                self.activ_funk_home()
            else:
                print("–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!")
                numbers()

        numbers()

    def nardu_klim(self):
        nardu = input("–•–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å —Å –Ω–∏–º –≤ –Ω–∞—Ä–¥—ã? ")
        if nardu.lower() == '–¥–∞':
            print("–í—ã –∏–≥—Ä–∞–µ—Ç–µ! –ö–ª–∏–º —è–≤–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–µ—Ä—å–µ–∑–Ω–æ...")  # –º–± –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–≥—Ä—ã –≤ –Ω–∞—Ä–¥—ã
            exit()
        elif nardu.lower() == '–Ω–µ—Ç':
            print("–ö–ª–∏–º –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥—Ä—É—Å—Ç–∏–ª. –ù–æ –Ω–∞—á–∞–ª —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ –µ–≥–æ –≥–µ—Ä–æ–∏—á–µ—Å–∫–æ–º —Å–ø–∞—Å–µ–Ω–∏–∏ –∫–æ—Ä–∞–±–ª—è –≤ —à—Ç–æ—Ä–º!üö¢")
            exit()
        else:
            print(f"{Fore.RED}–¥–∞/–Ω–µ—Ç{Style.RESET_ALL}")
            self.nardu_klim()


class Mountains(AtHome):

    def __init__(self):
        super().__init__(inventar=0, caught_fish=0)
        self.max_length = 10
        self.dog_met = False
        self.qual_tea = 0

    def message(self):
        print(f"{Fore.GREEN}–í—ã –¥–æ–±—Ä–∞–ª–∏—Å—å –¥–æ –±–æ–≥–∞—Ç–æ–π –ø–æ–ª—è–Ω—ã{Style.RESET_ALL}")

    def for_dog(self):
        if self.dog_met:
            return

        chanse = random.randint(0, 100)
        if chanse == 100:
            dog_met = True
            return f"{Fore.YELLOW}–í–∞—Å —Å—Ç—Ä–µ—Ç–∏–ª—Å—è –æ–¥–∏–Ω–æ–∫–∏–π –ø–µ—Å–∏–∫!{Style.RESET_ALL}"

    def collect_tea(self):
        self.random_tea()
        self.max_length = 10

    def random_tea(self):
        self.qual_tea = random.randint(1, 20)
        print(f"–ù–∞ –ø–æ–ª—è–Ω–µ —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–∞–≤ –Ω–∞ {self.qual_tea} –ø—É—á–∫–æ–≤(-–æ–∫)")
        self.skolko_tea()

    def skolko_tea(self):
        while self.inventar < self.max_length and self.qual_tea > 0:
            try:
                user_collect = int(
                    input(f"–°–∫–æ–ª—å–∫–æ —Å–æ–±–µ—Ä–µ—à—å? (–î–æ—Å—Ç—É–ø–Ω–æ: {self.qual_tea}, –ú–µ—Å—Ç–æ: {self.max_length - self.inventar}) "))
                if user_collect + self.inventar > self.max_length:
                    print(
                        f"{Fore.RED}–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –≤ —Ä—é–∫–∑–∞–∫–µ!{Style.RESET_ALL} –ú–æ–∂–µ—à—å –≤–∑—è—Ç—å —Ç–æ–ª—å–∫–æ {self.max_length - self.inventar} –ø—É—á–∫–æ–≤.")
                elif user_collect > self.qual_tea:
                    print(f"{Fore.RED}–ù–∞ –ø–æ–ª—è–Ω–µ —Å—Ç–æ–ª—å–∫–æ –Ω–µ—Ç!{Style.RESET_ALL} –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {self.qual_tea} –ø—É—á–∫–æ–≤.")
                elif user_collect == 0:
                    self.return_home()
                else:
                    self.inventar += user_collect
                    self.qual_tea -= user_collect
                    print(
                        f"–¢—ã —Å–æ–±—Ä–∞–ª {Fore.GREEN}{user_collect}{Style.RESET_ALL} –ø—É—á–∫–æ–≤. –í —Ä—é–∫–∑–∞–∫–µ: {Fore.BLUE}{self.inventar}{Style.RESET_ALL}.")
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

        if self.inventar == self.max_length:
            print("–†—é–∫–∑–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω!")
        elif self.qual_tea == 0:
            print("–ù–∞ –ø–æ–ª—è–Ω–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ç—Ä–∞–≤!")

        self.return_home()

    def return_home(self):
        for i in "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ–º–æ–π...":
            print(f"{Fore.CYAN}{i}{Style.RESET_ALL}", end='', flush=True)
        print()
        home = AtHome(inventar=self.inventar, caught_fish=0)
        home.mes_you_home()
        home.activ_at_home()


def start():
    if __name__ == '__main__':
        fishing = Fishing()
        fishing.list_activity()


start()

# home = AtHome(inventar=0, caught_fish=[])
# home.activ_at_home()
